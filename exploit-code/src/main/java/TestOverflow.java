import java.nio.ByteBuffer;
import java.nio.IntBuffer;

//import org.openjdk.jol.vm.VM;

public class TestOverflow {
  public static void testOverflow(String[] args) {
    int[] emptySpace = new int[120000000];
    int[] dst = new int[1209098507];

    for (int i = 0; i < dst.length; i++) {
      dst[i] = 0xAAAAAAAA;
    }

    int bytes = 400;
    ByteBuffer bb = ByteBuffer.allocateDirect(bytes);
    IntBuffer ib = bb.asIntBuffer();

    for (int i = 0; i < ib.limit(); i++) {
      ib.put(i, 0xBBBBBBBB);
    }

    System.out.println("First IB element = " + ib.get(1));
    int offset = 1073741764; // offset << 2 = -240
    int length = 2;

//    System.out.println("emptySpace memory address = " + VM.current().addressOf(emptySpace));
//    System.out.println("DST memory address = " + VM.current().addressOf(dst));
//    System.out.println("Bytes memory address = " + VM.current().addressOf(bytes));
//    System.out.println("IB memory address = " + VM.current().addressOf(ib));
//    System.out.println("BB memory address = " + VM.current().addressOf(bb));
    ib.get(dst, offset, length); // breakpoint here
    while (true) {

    }
  }
}
